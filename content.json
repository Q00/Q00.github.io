{"meta":{"title":"Q00 blog","subtitle":null,"description":null,"author":"Q00","url":"http://Q00.github.io"},"pages":[],"posts":[{"title":"AWS-Cognito","slug":"AWS-Cognito","date":"2018-10-29T05:18:54.000Z","updated":"2018-10-29T07:35:16.502Z","comments":true,"path":"AWS-Cognito/","link":"","permalink":"http://Q00.github.io/AWS-Cognito/","excerpt":"","text":"Cognito 출처 : aws 공식홈페이지 손쉽게 웹과 모바일에 사용자가입, 로그인 및 액세스 제어기능 추가 할 수 있는 서비스소셜자격 증명 공급자 역시 지원한다. cognito의 두가지 구성요소 사용자풀 : 앱 사용자의 가입 및 로그인 옵션을 제공하는 사용자 디렉터리 가입 및 로그인 서비스 제공 사용자 로그인을 위한 내장 사용자 지정 웹UI 사용자 디렉터리 관리 및 사용자 프로필 MFA (멀티 팩터 인증), 여러 보안기능 AWS LAMBDA 트리거를 통한 사용자 지정 워크플로우 및 사용자 마이그레이션 자격증명풀 : 기타 AWS서비스에 대한 사용자 액세스 권한을 부여 타사 ( facebook, google)등 로그인 인증 , aws 리소스 액세스 권한 부여 구현방법 client side에서 구현을 몇가지 해야 server side 구현이 수월하게 가능하다 js로 구현하는 cognito server side단 server side에서만 구현하는 방법이 있어보이는데 아직은 잘 모르겠다. passport와 cognito로 서버에서 user pool 구현 현재까지의 cognito에 대한 느낀점 여러 로그인 폼과 사용자 인증, 가입에 대해 아주 좋고 가벼운 방식의 서비스를 제공하는 것으로 보이나 예제가 너무 적고 docs로는 이해하기가 어려워 삽을 좀 푸었다.만약에 안드로이드까지 만지게 되어서 client side까지 만지게 된다면 정확히 어떤 서비스일지 확실히 알 것 같다. 사용한 리포 이 리포에 가면 코그니토를 어떻게 사용하고 있는지 확인 할 수 있다.","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"Cognito","slug":"Cognito","permalink":"http://Q00.github.io/tags/Cognito/"},{"name":"auth","slug":"auth","permalink":"http://Q00.github.io/tags/auth/"}]},{"title":"serverless-framework","slug":"serverless-framework","date":"2018-10-23T14:33:27.000Z","updated":"2018-10-29T07:35:47.266Z","comments":true,"path":"serverless-framework/","link":"","permalink":"http://Q00.github.io/serverless-framework/","excerpt":"","text":"serverless frameworkserverless framework는 서버리스 아키텍쳐로 구성하여 서버를 직접 설정할 필요가 없는 프레임워크 입니다. 서버가 없는 것처럼 보이게 됩니다. 실제로 서버가 없진 않습니다. 이번에 다뤄볼 serverless framework는 aws lambda와 api gateway를 이용하여 프레임워크를 만들여보려고 합니다.이러한 serverless framework는 서버에 대해 어떠한 property든지 신경쓰지 않아도 됩니다. IaaS처럼 ec2같은 서비스, PaaS의 EB(elastic beanstalk)와 같은 서비스와는 다르게 어떠한 설정을 하지 않아도 서버를 만들 수 있습니다. FaaS(Function as a Service)Faas는 백엔드 서버 코드를 함수단위로 쪼개서 함수를 aws등 서버에 등록하고 호출해서 사용하는 방식을 말합니다. 이러한 함수는 크론으로 시간단위로 호출할 수 있고, api request를 통해 호출 할 수 있습니다.요금은 함수가 요청한 회수에 따라 과금되며 aws lambda같은 경우 100만건당 0.2$로 요금이 과금됩니다.이러한 요금으로 로켓펀치등 몇몇 기업에서 serverless framework를 이용해 서버비를 크게 절감한 사례가 있습니다. slideShare 자료 serverless framework에 대해 구글에 정말 좋은 자료들이 많으므로 book-recommend repositery를 개발하면서 느낀점, expressJs를 wrapping하여 serverless-framework를 띄우는 법, 보안적인 부분에 대해 설명하는 posting을 하도록 하겠습니다. 해당 포스팅을 보기전에 앞서 serverless에 대해 정확히 숙지하고 오셔야 이해하기 편합니다.저는 물론 숙지하지 않고 뛰어들어 고생을 많이 했습니다","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"serverless","slug":"serverless","permalink":"http://Q00.github.io/tags/serverless/"},{"name":"lambda","slug":"lambda","permalink":"http://Q00.github.io/tags/lambda/"}]},{"title":"AWS-root privileges provided sercice","slug":"AWS-root-privileges-provided-sercice","date":"2018-08-07T14:33:51.000Z","updated":"2018-10-13T13:32:16.610Z","comments":true,"path":"AWS-root-privileges-provided-sercice/","link":"","permalink":"http://Q00.github.io/AWS-root-privileges-provided-sercice/","excerpt":"","text":"Root Privileges를 가진 서비스 몇몇의 서비스들은 customer에게 root 권한을 준다. ( root previlege, full administrative privilege) EC2 EC2EMR ( ELASTIC MAP REDUCE) Opswork ElasticBeanstalk","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"EMR","slug":"EMR","permalink":"http://Q00.github.io/tags/EMR/"},{"name":"root_privilege","slug":"root-privilege","permalink":"http://Q00.github.io/tags/root-privilege/"},{"name":"privilege","slug":"privilege","permalink":"http://Q00.github.io/tags/privilege/"},{"name":"EC2","slug":"EC2","permalink":"http://Q00.github.io/tags/EC2/"},{"name":"ElasticBeanstalk","slug":"ElasticBeanstalk","permalink":"http://Q00.github.io/tags/ElasticBeanstalk/"},{"name":"Opswork","slug":"Opswork","permalink":"http://Q00.github.io/tags/Opswork/"}]},{"title":"AWS-Responsibility_model","slug":"AWS-Responsibility-model","date":"2018-08-04T11:28:59.000Z","updated":"2018-10-13T13:32:16.559Z","comments":true,"path":"AWS-Responsibility-model/","link":"","permalink":"http://Q00.github.io/AWS-Responsibility-model/","excerpt":"","text":"Responsibliity model (공동 책임 모델) 공동책임 모델, 보안과 규정 준수는 공동책임 customers responsiblility : Antivirus, OS Level Patches, Applict 등등IaaS로 분류되는 서비스는 고객이 필요한 모든 보안 구성과 관리작업을 수행해야 함AWS가 제공하는 보안 그룹, 방화벽의 구성과 게스트 운영체제 및 기타 관련 애플리케이션 소프트웨어 AWS Cloud responsibility : AWS 클라우드에서 제공되는 모든 서비스를 실행하는 인프라를 보호할 책임이 있습니다. 이 인프라는 AWS 클라우드 서비스를 실행하는 하드웨어 소프트웨어 네트워킹 및 시설 참고 : https://aws.amazon.com/ko/compliance/shared-responsibility-model/","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"Responsibility_model","slug":"Responsibility-model","permalink":"http://Q00.github.io/tags/Responsibility-model/"}]},{"title":"AWS-SNS","slug":"AWS-SNS","date":"2018-08-03T16:25:02.000Z","updated":"2018-10-13T13:32:16.575Z","comments":true,"path":"AWS-SNS/","link":"","permalink":"http://Q00.github.io/AWS-SNS/","excerpt":"","text":"SNS (Simple Notification Service) 메시지 전달, 또는 전송을 컨트롤 하는 서비스publisher 와 subscriber로 나뉜다. Instantaneous, push-bashed(no polling) publisher는 비동기적으로 subscriber와 소통한다.(웹, 모바일 앱, SQS, aws lambda 등등) 0.5$ per 1 million sns request0.06$ 100000 http notification0.75 per 100 sms2$ 100000 email SNS와 SQS를 사용하여 확장성 높이기 참고 : http://hochulshin.com/aws-s3-sns-sqs-event/ 활용사례 팬아웃 : 다중 subscriber로 메시지 전송, 예를 들어 실서버와 개발 서버로 나누어 데이터 복제하여 한 곳은 서비스, 한곳은 테스트 할 수 있음 어플리케이션 및 시스템 경보 푸시 이메일, 문자 메시지 모바일 푸시 알림 메시지 지속성 (가용성 내구성)","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"SNS","slug":"SNS","permalink":"http://Q00.github.io/tags/SNS/"}]},{"title":"AWS-SQS","slug":"AWS-SQS","date":"2018-08-03T15:27:29.000Z","updated":"2018-10-13T13:32:16.581Z","comments":true,"path":"AWS-SQS/","link":"","permalink":"http://Q00.github.io/AWS-SQS/","excerpt":"","text":"SQS (Simple Queue Service) 출처 : https://slack.com/apps/A0F827G56-amazon-sqs 빠르고 안정적이고 내구성 있는 메시지 큐 서비스 SQS의 장점 Security : Server-side Encryption과 AWS KMS의 키를 이용해 대기열의 메시지 보호 durability : 메시지의 안정성을 위해 여러서버에 저장 availability :using redundant infrastructure scalability Reliability : SQS lock message during processing Customization SQS SNS MQSQS SNS 는 확장성이 뛰어나고 사용하기 쉽고 메시지 브로커를 설정할 필요없는 서비스MQ는 메시지 브로커서비스, 기존 메시지 브로커에서 응용 프로그램을 마이그레이션하는 경우 권장 SQS 종류 Standard Queue : Available in all regions. unlimited Througput(무제한 처리량) At-least-once Delivery(higly distributed architecture 로 인해 복사번을 한번이상보낼 수도 있음) best-effort ordering(순서가 다를수도 있음) FIFO Queue : Available US EAST(Virginia, Ohio) US WEST(Oregon), EU(Ireland) Maximum 3000(300 transaction per second) Exactly-Once Processing FIFO SQS infopull-based(not push based)Message (256KB)큐에 1분에서 14일까지 있을 수 있음기본 보유기간 : 4일visibility Timeout(제한 시간 초과) : 분산 시스템인 SQS는 메시지를 실제로 받는지 보장할 수 없고 삭제하지 않음. 메시지를 수신 및 처리할 수 없는 기간 설정 기본 30초 최대 12시간 will be hidden from other consumer 거의 모든 경우에 SQS long polling이 SQS short polling보다 바람직함 즉각적인 메시지 처리가 필요한 경우. 단일 스레드에서 여러 대기열을 폴링하는 경우 - 해당 경우에만 short polling이 바람직함 SQS vs SWF SQS offers message-oriented API handle duplicate SWF presents a task-oriented API never duplicated","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"SQS","slug":"SQS","permalink":"http://Q00.github.io/tags/SQS/"}]},{"title":"AWS_Route53","slug":"AWS-Route53","date":"2018-08-03T15:09:55.000Z","updated":"2018-10-13T13:32:16.564Z","comments":true,"path":"AWS-Route53/","link":"","permalink":"http://Q00.github.io/AWS-Route53/","excerpt":"","text":"Route 53출처 : http://exrecord.net/how-to-register-aws-route53 ec2, elb, s3 cloudfront와 연동가능한 dns서비스 대규모 글로벌서비스할때 유용일반적인 dns 서버 : ip1개 이용(현재 50개 지원가능하나 이후 더 추가가능)일반적인 dns 서버와 차이점 Latency Based Routing, Weighted Round Robin, Dns Failover, Geo Routing =&gt; 도메인 하나를 쿼리하더라도 상황에 따라 다른 ip주소 응답 Latency Based Routing 현재 위치에서 지연시간이 가장 낮은 리전의 ip주소 응답 weightred Round Robin : 서버 ip주소나 도메인(ELB)마다 가중치를 부여하여 트래픽을 조절하는 기능. DNS Failover : 장애가 발생한 서버의 ip주소 또는 도메인(ELB)알려주지않음 A record : Address record : dns서버에서 ip주소를 알려주도록 설정하는 기능 - elb에도 연결가능하나 predefined된 ip가 없어 alias를 사용하여 사용해야함alias 사용 가능routing policy : simple, latency, weightred round robin, failover, geolocation Route53은 CLoudFront또는 s3와 연결할때 zone APex를 통해 www.를 없애고 url접근일반적인 dns에서는 CNAME으로 연결할때 루트도메인을 사용할 수 없음 zone apex 루트도메인, 네이키드 도메인, 이름그대로 서브도메인이 붙지 않은 상태 Route53 지원 레코드https://docs.aws.amazon.com/ko_kr/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#CNAMEFormat CNAME Record &amp; Alias Record charge for CNAME query zone apex 에서 CNAME 레코드 생성 불가능 , alias record 생성 가능 어떤 DNS 레코드든 CNAME 가리킬수 있음, alias record는 Aws 리소스중 하나, 해당 호스팅 영역의 레코드만 가리킬 수 있음","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"Route53","slug":"Route53","permalink":"http://Q00.github.io/tags/Route53/"}]},{"title":"AWS-ELASTICACHE","slug":"AWS-ELASTICACHE","date":"2018-08-02T15:52:48.000Z","updated":"2018-10-13T13:32:16.510Z","comments":true,"path":"AWS-ELASTICACHE/","link":"","permalink":"http://Q00.github.io/AWS-ELASTICACHE/","excerpt":"","text":"#Elasticcache 분산 인 메모리 캐시를 손쉽게 생성하고 확장할 수 있는 서비스읽기중심의 서비스를 제공해야하는 환경, 고속으로 데이터를 분석해야하는환경 적합 인메모리캐시 : 모든 데이터를 메모리에만 올려놓고 사용하는 데이터베이스의 일종.RDBMS는 디스크에 데이터를 영구적으로 저장해놓고 필요한 데이터만 메모리에 읽어서 사용 서버의 전원공급이 중단되면 데이터 소멸. Memcached : 유명한 분산메모리 캐시시스템 , 스냅샷 , 레플리카 지원하지않음, 노드확장할때 클러스터 확장 용량 늘어남REDIS : 다양한 데이터형식을 제공하는 KEY VALUE 데이터저장소 스냅샷 레플리카 지원함, 샤딩구현필요(분산) 용량 늘어나지않음-&gt; 마스터 노드와 슬레이브 노드 가 나눠져 (리드레플리카, 등등) 용량이 커지지않고 샤딩으로 다른 캐시노드를 만들어야함-&gt; failover 지원 - 마스터 장애일때 read레플리카 가 마스터로 승격되어 사용됨 telnet 에 endpoint로 접근가능함 인스턴스를 캐시노드 라고부름. rds와의 차이점 rds는 생성된 db인스턴스의 인스턴스클래스를 변경할 수 있지만 엘라스틱 캐시는 생성된 캐시 유형을 변경할 수 없음 캐시노드 유형을 바꾸려면 삭제하고 생성 외부에서 rds서버 접근가능엘라스틱 캐시엔진 외부에서 접근 불가능 LIGHT 사용률, MEDIUM 사용률, HEAVY 사용률 prefered zone : 캐시가용영역cached subnet group : 기존에 서브넷그룹이 존재해야 가능 memcached cluster 추가설정 vcp security group: vcp security group 따로 생성필요함 maintenence window: 점검시간 00:00분 한시간 생성하더라도 endpoint로 접근이안됨 따라서 security group에 11211 port번호 열어줘야함","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"ELASTICACHE","slug":"ELASTICACHE","permalink":"http://Q00.github.io/tags/ELASTICACHE/"}]},{"title":"AWS-CloudFront","slug":"AWS-CloudFront","date":"2018-07-29T11:19:14.000Z","updated":"2018-10-13T13:32:16.481Z","comments":true,"path":"AWS-CloudFront/","link":"","permalink":"http://Q00.github.io/AWS-CloudFront/","excerpt":"","text":"CloudFront 전세계에 파일을 빠른 속도로 배포하는 cdn서비스 세계 곳곳에 서버 구축하는 것이 어렵기 때문 (리전생성포함)에지로케이션(캐시서버)으로 파일을 다운받으므로 속도가 빨라짐리전에서 멀리떨어진 곳은 클라우드프론트를 통해 에지로케이션에 캐시하면 빠른 성능을 낼 수 있음 초당 최대 10000개 request 처리가능 cloudFront 와 일반적인 CDN서비스 차이 동적콘텐츠 전송(Dynamic Content Delivery) 지원 url 규칙에 따라 정적페이지는 캐시, 동적페이지는 바로 ec2인스턴스로 접속하도록 구성 RestFul API 지원 post put delete options patch 메서드는 캐시되지않고 곧바로 오리진 전달 http쿠키 지원 동영상 전송위한 라이브 스트리밍 프로토콜 지원 사용한만큼만 지불(선약정, 최소약정없음) CloundFront 배포 CloudFront가 지원하는 origin s3 : 기본적인 origin ec2 인스턴스 : ec2인스턴스에 웹서버 구축하면 오리진으로 사용 elb(elastic load balancing) : ec2인스턴스 여러대의 부하를 분산하는 elb도 오리진으로 사용가능 aws이외의 웹서버: 사용가능 distribution : 에지로케이션의 집합으로 이루어진 CDN web Distribution - Website에서 많이 사용됨 RTMP - 미디어 스트리밍에서 사용됨 origin domane name : 커스텀 오리진을 사용하려면 이곳에 오리진 서버의 도메인을 설정하면 됨origin access identity : 오리진 접근 식별자ec2인스터스의 public dns입력origin id : 자동생성(오리진 구분id)path pattern : cloudFront 로 파일을 가져올 규칙, 기본값은 *로 설정되어잇어 모든파일을 가져오게됨. distribution 생성 후 따로 추가가능viewer protocol policy : cloudFront로 보여질 프로토콜 정책을 설정함.allow http method ; get,head,post, patch, delete, option, put : 파일을 읽기만 할때 선택get head put post patch delete options : 동적 콘텐츠 전송을 사용할때 선택comment : 식별자 이름grant read permission on bucket : cloudfront가 bucket을 읽을 수 있는 권한 - yes면 못봄restrict bucket access : 클라우드프론트만 접근할 수 있는 권한 설정forward cookie : 쿠키를 클라이언트로 전달할건지ec2인스턴스를 오리진으로 사용할때 ec2인스턴스에 eip연결햇는지 확인필요, ec2인스턴스 재부팅후 ip주소 변경으로 public dns사용 불가능, 이후 cloudFront에서는 오리진에 접속할 수 없어 캐시기능 동작하지 않음 signed url이용 canned policy 를 사용한 sinedurl : 파일1개의 사용제한, 정책내용이 url에 포함되어있지않음custom policy 를 사용한 sinedurl : 파일 여러개 사용제한, 특정ip ip대역대에서만 파일 받는 기능, 날짜 지나면 파일제한기능,날짜이후에 다운로드기능… 정책이 포함되어있음 signature 생성 후 : 접속 cloudFront를 signed url로 제한하더라도 s3의 접근권한이 열려있으면 접근가능함. Resctrict bucket access 설정s3이외의 ec2인스턴스나 외부웹서버가 오리진이라면 웹서버레벨에서 http헤더의 user-agent 내용확인 -&gt; cloudFront에서오면 Amazon CloudFront가 user-agent임 restrict viewer access: sined url로 클라우드프론트 사용 제한 설정 invalidation으로 cloudfront 콘텐츠 갱신 price class : 필요없는 지역을 제외할때 사용 (ex. use US only 등등) forward query string cloudfront 캐시유지시간 24시간, 오리진 http헤더 캐시설정을 이용해 캐시유지시간 설정가능 Cloudfront log file 생성 참고 : https://docs.aws.amazon.com/ko_kr/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"CloudFront","slug":"CloudFront","permalink":"http://Q00.github.io/tags/CloudFront/"}]},{"title":"AWS-Placement_Group","slug":"AWS-Placement-Group","date":"2018-07-29T10:43:36.000Z","updated":"2018-10-13T13:32:16.552Z","comments":true,"path":"AWS-Placement-Group/","link":"","permalink":"http://Q00.github.io/AWS-Placement-Group/","excerpt":"","text":"Placement Group 참고 : https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/placement-groups.html#concepts-placement-groups Clustered Placement Group 대체적으로 Placement Group이라고하면 Clustered Placement Group을 뜻함 높은 대역폭, 낮은 지연 시간의 연결을 통해 EC2 인스턴스(Compute Optimized, GPU, Memory Optimized, Storage Optimized)를 Grouping low inter-node latency에서 컴퓨터 클러스터 퍼포먼스를 올려줌 single az 안에서만 존재 , Can’t span multiple AZ Spread Placement Group 다른 기본 하드웨어에 각자 배치된 인스턴스의 그룹 서로 떨어져있어야 하는 중요인스턴스의 수가 적은 애플리케이션에 권장됨 can span multiple az(가용영역당 최대 7 실행 인스턴스 지원)","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"Placement_Group","slug":"Placement-Group","permalink":"http://Q00.github.io/tags/Placement-Group/"}]},{"title":"AWS-CloudWatch","slug":"AWS-CloudWatch","date":"2018-07-29T09:42:00.000Z","updated":"2018-10-13T13:32:16.494Z","comments":true,"path":"AWS-CloudWatch/","link":"","permalink":"http://Q00.github.io/AWS-CloudWatch/","excerpt":"","text":"#CloudWatch (출처 : https://assistedcloud.com) AWS 클라우드 리소스 , AWS 어플리케이션 서비스 모니터링(performance monitoring) 로그파일 수집, 모니터링 시스템 전반의 가시성 확보 Dashboard를 통해 확인 가능 Alarm CloudWatch Event는 AWS resource 상태 변화에 대한 대응에 도움됨 Standard Monitoring : 5 Minutes Detail Monitoring : 1 Minute DashboardAlrmsEvent : Respond to state changes in AWS Resource logging : diffrence with Cloudtrail (only API logging) 메모리는 로깅 못함 client connection information 로깅못함 data, cpu, ec2 status check failed","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"CloudWatch","slug":"CloudWatch","permalink":"http://Q00.github.io/tags/CloudWatch/"}]},{"title":"AWS-Lambda","slug":"AWS-Lambda","date":"2018-07-29T07:42:51.000Z","updated":"2018-10-13T13:32:16.541Z","comments":true,"path":"AWS-Lambda/","link":"","permalink":"http://Q00.github.io/AWS-Lambda/","excerpt":"","text":"aws Lambda (출처 :http://diego-pacheco.blogspot.com ) Code를 업로드하고 람다 펑션을 생성할 수 있게 해주는 이벤트 중심 컴퓨팅 서비스. OS, Patching, Scailing 등등을 신경쓰지 않아도된다. HTTP request에 대한 응답을 위해서는, AWS API Gateway나 AWS SDK로 만든 API를 사용해야 한다. Cold Start가 존재하여 리퀘스트 타임아웃 에러가 존재한다. 이를 해결하기 위해서는 python, golang등 performance가 좋은 언어를 사용하거나 주기적으로 request를 보내는 방법이 있다. 백만 콜까지 무료, 이후 백만콜당 0.2$ 매우 저렴 API 게이트웨이를 이용하면 서버가 없어도된다. Continuous Scaling 자동으로 Scale out, not scale up Scale up : 서버 그자체를 증강하여 처리능력 향상 시킴Scale Out : 접속된 서버의 대수를 늘려 처리능력을 향상 시킴(수평스케일링) 람다펑션은 독립적, 1 event = 1 function 서버리스 서비스 : S3, API gateway, lambda, dynamo DB( EC2는 서버리스아님) 트리거 사용하여 람다펑션이 다른 람다 펑션 호출 -&gt; 1 event = multiple function AWS X-ray를 통해 debug 가능","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"Lambda","slug":"Lambda","permalink":"http://Q00.github.io/tags/Lambda/"}]},{"title":"AWS-EFS","slug":"AWS-EFS","date":"2018-07-29T07:17:51.000Z","updated":"2018-10-13T13:32:16.506Z","comments":true,"path":"AWS-EFS/","link":"","permalink":"http://Q00.github.io/AWS-EFS/","excerpt":"","text":"EFS( Elastic File System) (출처 : https://www.boylesoftware.com) EFS는 EC2인스턴스의 파일 스토리지 서비스로서 파일시스템에 대해 편리한 인터페이스를 제공한다. NFSv4 프로토콜 제공 no pre-provisioning required 페타바이트까지 확장 가능 수천개의 NFS 커넥트 지원 Multiple az에 저장됨 Read After write Consistency EC2 인스턴스에 마운트 해서 사용 여러 인스턴스들이 같은 파일서버 마운트하여 파일을 공유 후 ELB 사용","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"EFS","slug":"EFS","permalink":"http://Q00.github.io/tags/EFS/"}]},{"title":"AWS-RDS","slug":"AWS-RDS","date":"2018-07-21T07:41:08.000Z","updated":"2018-10-13T13:32:16.557Z","comments":true,"path":"AWS-RDS/","link":"","permalink":"http://Q00.github.io/AWS-RDS/","excerpt":"","text":"RDS 관계형 데이터베이스(rdbms)를 손쉽게 생성하고 확장할 수 있는 서비스 single tenant -&gt; 하나의 ec2 host에서 하나의 rds client사용 가능 RDS를 사용해야하는 이유손쉽게 db인스턴스 생성가능, 사용량 늘어나면 스토리지 용량과 iops를 증가, faliover기능 통해 장애 해결, read replica이용해 읽기성능 향상 RDS 인스턴스:형식 : db.로 시작 인스턴스 패밀리인 m+세대숫자, 사양규모 (db.m3.medium)인스턴스 클래스: 마이크로인스턴스 : 가격싼 인스턴스 무료임스탠다드 : vCPU 메모리 네트워크 등이 평균적인 사양으로 제공됨메모리 최적화 : 다른인스턴스클래스보다 메모리 용량 큼 인스턴스 기본구매옵션 : 온디맨드 인스턴스 - aws.amazon.com/kr/rds/details RDS 예약 인스턴스 : 선불로 내면 가격대폭하락light 사용률 인스턴스 : 가장 저렴 사용시간 적을때사용meium 사용률 예약 인스턴스: 항상 사용하지만 사용량에 약간의 변화가 있을때 유용heavy 사용률 인스턴스 : 시간당 가장 저렴(선결제금액은 비쌈) 24시간 상시 가동되어야 할때 RDS 데이터베이스 엔진과 라이선스 모델 mysql = general public license 추가요금 x postgreSQL = postgreSQL license 이며 추가요금 발생 x, mysql보다 조금 높음 oracle = license include : aws에서 미리 구매한 라이센스 사용, 라이센스 요금 추가발생 (oracle standard edition one) Bring-Your-Own-License(BYOL) : 오라클 라이센스 따로구매 Microsoft sql server : 프리티어 : 매월750시간 무료 마이크로인스턴스에 단일 가용영역으로만 SQL server Express edition 사용시 license include : aws에서 미리 구매한 라이센스 사용 BYOL : 추가요금 발생안함 RDS DB 세부설정 : multi-AZ Deployment : 장애에 자동대처하는 failover 기능을 위한 다중가용영역 복제옵션 (good for DR strategy &gt; backup) 예비인스턴스에서 백업 진행하므로 메인인스턴스의 io 활동이 일시 중단되지 않는다. 그러나 지연시간이 증가할 수 있음( 오로라 db는 지원안함, 대신 read replica 를 승격시켜서 사용함)https://aws.amazon.com/ko/rds/details/multi-az/allocated storage : db에서 데이터를 저장할 스토리지 용량use provisioned IOPS : 고성능 I/O옵션, 이 옵션을 사용하면 스토리지의 읽기/쓰기 성능을 원하는대로 조절할수있음, 추가비용추가(100,200GB~16TB) 추가설정 :VPC (virtual private cloud) : DB인스턴스가 위치할 네트워크subnet group : db인스턴스가 위치할 서브넷, vpc를 default를 선택하지 않았을때 설정가능publicy Accessible : db를 외부에서 접근할수잇게하는 옵션 NO 설정 시 내부에서만 접근가능함availity zone : db인스턴스가 생성될 가용영역, ec2인스턴스가 db에 접속한다면 같은 az에잇는게 좋음vpc security group : 방화벽 설정, 나중에 db인스턴스전용으로 따로 생성parameter group : mysql을 실행할때 필요한 매개변수 집합(my.cnf 생성하는 것과 동일)option group : db옵션 - mysql 특별히 설정하지 않아도됨backup : 자동백업옵션을 사용하면 복구사용가능(pit point in time) 최근 5분전상태로 되돌릴수잇음, 1초단위로 설정가능 - 기본적으로 truebackup retention period : 백업 데이터 유지기간, 최대 35일 설정가능 DB instance 새로 만들었을 경우 기본적으로 백업 유지기간 1일.Auto Minor version Upgrade : 자동으로 db 마이너버전 업데이트 기본값그대로사용inno db사용backup window: 백업시간, 기본값 no reference, duration 0.5로 설정 starttime 00:00으로 설정 maintenance window와 겹치지 않게 하기위함, immediately effectMaintenance Window : 점검 시간 : 기본값 : no reference backupwindow시간과 겹치지않게해야함 이 시간에 auto minor version upgrade 를 설정햇다면 db버전 업데이트 패치 적용, 이시간에 db인스턴스 중지 db 인스턴스 클래스를 변경햇다면 이시간에 적용됨, 이시간에 인스턴스중지 다음 Maintenance Window에 업데이트가 반영이 되는 경우 지금 당장 업데이트하고 싶을 시에는 ApplyImmediately 옵션 사용 endpoint로 접근가능하나 securiy group으로 인해 접속안됨 - security group에서 포트 입력 필요ex)oracle : 1521 postegresql : 5432 참조 : https://docs.aws.amazon.com/ko_kr/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.htmlec2 classic일때는 무조건 security group에 포트번호 추가해야함ec2 vpc일때는 추가하지 않아도됨 HTTPS를 통해서만 SOAP API 통신 가능 자동복구db인스턴스 action중 restore을 이용함-&gt; 자동 백업의 특정시점으로 db인스턴스가 생성됨 10분 15분정도-&gt; db인스턴스가 새로생성된 후 엔드포인트 새로 생성 db인스턴스 삭제시에 db스냅샷은 남아있으나 자동백업은 남아있지않음 read replica db인스턴스의 읽기 복제본을 만들어 성능향상 -&gt; 읽기위주 작업이많을경우 최대 5개를 만들어 부하분산약간의 시간차를 가지고 복제해 데이터가 일치하지않을 수 있음 read replica 를 db instance로 승급시킬때 새로운 db instance가 생성되더라도 전 읽기 전용 복제본 원본의 백업 보존 기간, 백업 기간, 파라미터 그룹은 그대로 보존됨 read replica의 read replica를 만드는 것은 MySQL based RDS에서만 허용됨 생성 설정destination region : 여러 리전에 생성가능하여 지역별로 읽기성능 높일수잇음db instance class : 생성할 read replica 인스턴스의 클래스 , 생성할때 더 좋은 인스턴스 클래스로 바꿀수잇음-&gt; 복사될때 마스터 db인스턴스도 modifying상태가 됨","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"RDS","slug":"RDS","permalink":"http://Q00.github.io/tags/RDS/"}]},{"title":"AWS-OpsWork","slug":"AWS-OpsWork","date":"2018-07-18T15:05:57.000Z","updated":"2018-10-13T13:32:16.546Z","comments":true,"path":"AWS-OpsWork/","link":"","permalink":"http://Q00.github.io/AWS-OpsWork/","excerpt":"","text":"OpsWork 참고 : http://arisu1000.tistory.com/27736?category=477480https://docs.aws.amazon.com/ko_kr/opsworks/latest/userguide/welcome.html 특징 : Elastic BeansTalk와는 다르게 컨테이너 수정가능, 덜 편리함 기본 EC2 인스턴스에서 제공하는 메트릭 외에 CPU, 메모리 사용률, load average 등등 1분 단위 모니터링 제공 스택 삭제할 시에 스택에 포함되어있는 app, 인스턴스 지운 후 삭제 ELB 는 직접 생성해서 스택에 추가해줘야함 기본 개념OpsWork ( Stack ( Layer ( instance ( app ))) back-end)^|vanother resource( chef cookbook) 스택 (STACK)기본 구성요소로서 그룹화해서 관리함. 스택을 vpc안에 두어 사용자와 격리할 수 있음스택 수정 : region, vpc id 빼고는 모든 설정을 수정할 수 있음스택 복사 : region을 변경할때 사용할 수 있음 스택에서 어플리케이션을 배포하고 모니터링할 수 있음(인스턴스 집합(공통인스턴스)인 layer를 이용함 =&gt; 비용절감, 서버 분리를 통한 관리 이점을 얻을 수 있음) Auto Healing, Auto Scailing을 사용하여 인스턴스상태 모니터링, 새 인스턴스 provisioning 여러 스택을 사용하여 공통의 목적을 가진 인스턴스를 관리하는 것이 좋다. 개발 스택 업데이트, 버그 수정 QA 스테이징 스택 퍼블릭 버전 스택 레이어(LAYER)chef recipes 따라 설치 업데이트 배포함, 인스턴스 설정 포함. 비용절감, 서버 분리를 통한 관리 이점을 얻을 수 있음 하나 이상의 인스턴스를 가질 수 있음 Elastic Load Balancing Layer 참고 : https://docs.aws.amazon.com/ko_kr/opsworks/latest/userguide/layers-elb.html각 계층에 로드 밸런서를 하나만 연결할 수 있습니다. 각 로드 밸런서는 한 계층만 처리할 수 있습니다. AWS OpsWorks Stacks는 Application Load Balancer를 지원하지 않습니다. Classic Load Balancer만 AWS OpsWorks Stacks와 함께 사용할 수 있습니다. 인스턴스 EC2 인스턴스에 에이저트 설치 -&gt; 레이어 레시피 설정, 레이어 소프트웨어 시작 종류 24/7 인스턴스 : 수동으로 시작하고 정지하는 인스턴스 load-based 인스턴스 : CPU 사용률 같은 로드메트릭에 따라 자동으로 시작하고 정지하는 인스턴스 Time-based 인스턴스 : 지정된 일정에 따라 자동으로 시작하고 정지하는 인스턴스 인스턴스를 여러 Layer에 할당하게 되면 데이터베이스서버와 로드밸런서를 단일 인스턴스에서 호스팅-&gt; 비용 절감 어플리케이션 서버중 하나를 관리에 사용 스팟 인스턴스 지원되지 않음","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"OpsWork","slug":"OpsWork","permalink":"http://Q00.github.io/tags/OpsWork/"}]},{"title":"AWS-IAM","slug":"AWS-IAM","date":"2018-07-18T14:39:50.000Z","updated":"2018-10-13T13:32:16.536Z","comments":true,"path":"AWS-IAM/","link":"","permalink":"http://Q00.github.io/AWS-IAM/","excerpt":"","text":"IAM (Identity and Access Management) 식별 및 접근관리 aws 의 각 리소스에대해 접근제어와 권한관리 제공리소스가아닌 옵션이므로 따로 사용요금은 존재하지 않음 권한받은 유저만 접근가능 EC2 인스턴스에서 APi로 AWS 리소스에 접근하려면 항상 액세스키, 시크릿키를 설정해야만함 auto scailing 기능으로 ec2 인스턴스를 자동으로 늘려나갈때 IAM 역할을 사용하면 ec2인스턴스 생성 즉시 API로 aws리소스에 접근가능 모든 리전에서 사용가능함 IAM rule을 지정하면 인스턴스 생성시 rule을 지정해줄 수 잇음, IAM rule삭제시 인스턴스에서 aws리소스로 접근하는 권한이 사라짐 주의 사용자는 IAM rule 한개에만 적용받을 수 있음 Power User 는 IAM에 있는 그룹과 유저관리를 제외한 모든 AWS서비스에 접근할 수 있다. IAM group은 사용자 당 열개의 그룹에 속할 수 있음 IAM 기능 Centralised control of AWS account Shared Access to AWS account Granualr permmission Identity Federation(Active Directory, 등등) allows to set up own password rotation policy pci dss support","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"IAM","slug":"IAM","permalink":"http://Q00.github.io/tags/IAM/"}]},{"title":"AWS-ELB","slug":"AWS-ELB","date":"2018-07-17T15:28:00.000Z","updated":"2018-10-13T13:32:16.520Z","comments":true,"path":"AWS-ELB/","link":"","permalink":"http://Q00.github.io/AWS-ELB/","excerpt":"","text":"ELB ( Elastic Load Balancer ) 부하분산과 고가용성을 제공하는 프로그램으로서 일종의 L4와 같은 로드밸런서 최소 2개 이상의 인스턴스가 각기 다른 AZ에 존재해야함 L4(OSI Layer 4) : OSI 레이어에서 4번째 전송계층을 뜻함, TCP UDP 등의 프로토콜이 대표적이며 포트번호로 구분함, OSI레이어에서 네트워크 계층의 IP와 묶어서 처리 IP주소와 포트번호를 기준으로 트래픽 분배 L7 : OSI레이어에서 7번째 어플리케이션계층을 뜻함http프로토콜이 대표적 http헤더의 내용을 기준으로 트래픽 분배 Application Load Balancer 로드밸런싱 알고리즘 : 트래픽을 각 ec2 인스턴스로 분배할때 사용하는 알고리즘, 라운드로빈이라는 알고리즘을 사용, 우선순위를 두지 않고 순서대로 분배하는 방식 Connection Draining : Auto Scailing이 사용자의 요청을 처리중인 ec2 인스턴스를 바로 삭제하지 못하도록 방지하는 기능 sticky sessions: 사용자의 세션을 확인하여 적절한 ec2인스턴스로 트래픽을 분배하는 기능(http쿠키를 이용한 세션) *l7의기능 sticky session을 사용하려면 ELB에서 SSL이 종료된(terminated) HTTPS listener가 필요함 SSL 인증방식을 쓰려면 TCP 프로토콜을 사용 ELB HTTPS listener does not support Client-Side SSL certificates latency : elb 로드밸런서와 ec2인스턴스간 지연시간 Surge Queue Length : 큐에 남아잇는 요청의 개수 splitover Count :서지큐가 꽉차서 로드밸런서가 거부한 요청의개수 controller servcie : responsible for monitoring the Load Balancers Route 53과 elb로드밸런서의 dns name 대신 자신이 구입한 도메인을 사용하려면 route 53에서 A레코드를 생성할때 alias 를 yes로 선택하고 alias target에서 elb로드 밸런서를 선택하면 됨 elb로 한 가용영역안에서도 타겟에 트래픽 분산함. healthy check를 하며 healthy한 것에만 분산 ec2인스턴스중 security group에 http 정책이 잇어야함 외부 도메인 사용할 경우에 cname을 해당 도메인 네임서버에 추가해야함 enable cross-zone load balancing : 여러 가용 영역에 생성된 ec2인스턴스에 부하를 분산하는 옵션 Multiple zone support Cross-zone load balancing","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"ELB","slug":"ELB","permalink":"http://Q00.github.io/tags/ELB/"}]},{"title":"AWS-VPC","slug":"AWS-VPC","date":"2018-07-17T06:19:53.000Z","updated":"2018-10-13T13:32:16.592Z","comments":true,"path":"AWS-VPC/","link":"","permalink":"http://Q00.github.io/AWS-VPC/","excerpt":"","text":"VPC (Virtual Private Cloud) 사용자만의 가상 네트워크 제공 VPC는 무료, but VPC를 VPN에 연결할 경우 요금 부과 AWS에 가입하면 이미 하나의 VPC 존재 VPC 안에는 서브넷을 여러개 추가하여 네트워크 격리, 서브넷간의 접근제어(ACL) 설정가능(웹서버 -&gt; 공개 서브넷, db서버 -&gt; 사설 서브넷 보안 유리) VPC : 리전별 생성(최대 5개) 서브넷 : az별 생성 CIDR 표기법으로 IP 대역 설정 서브넷에 있는 인스턴스 launch 각각 서브넷에 IP 대역 설정 서브넷 사이의 Route table 설정 VPC당 한개의 Internet Gateway를 붙일 수 있음 (한개의 Internet gateway가 모든 az와 연결되어있음) aws resource에 대해 보안적인 관리가 가능함(ACL) Security group 설정 가능함 VPC에 속한 서브넷에서 외부 인터넷에 접속하려면 인터넷 게이트웨이가 필요하다. VPC 인터넷 게이트웨이 생성 후 VPC와 Attach VPC 구성 요소 Network Interfaces 기본적으로 인스턴스마다 VPC 대역내의 사설 IP가 할당된 Network Interface가 있음 기본 사설 IP외에 추가적인 사설 IP를 가질 수 있음 eth0으로 이용하는 network interface에 한개의자동할당된 공인 IP를 이용할 수 있음 VPC의 모든 인터페이스가 기본 네트워크 인터페이스(eht0) 을 가지며 분리할 수 없다 사설 IP하나당 EIP 가질 수 있음 MAC 존재 IP Address primary private IP와 public IP가 NAT 를 통해 매핑되어있음 secondary private IP를 할당할 수 있음 Subnet 하나의 VPC에 여러개 subnet존재가능(최대 200개) 1 Subnet = 1 AZ Route Table Internet GateWay VPC가 기본생성되었을때 인터넷과 통신 불가 VPC에 Internet Gateway를 연결해줘야지 VPC내부 인스턴스에서 외부 통신가능 Nat Instances NAT 안에 있는 private subnet이 인터넷 통신을 하기 위해서는 source/destination check을 unable해줘야함 Security group allow 규칙만 생성 VPC당 백개 생성, 하나의 그룹에 50개 룰 Network access control list(ACL) 서브넷에 연결된 방화벽 allow deny 규칙 설정 가능 stateless() Virtual private gateway AWS에 있는 VPN 커넥션 AWS VPC와 외부 사용자가 이용하고 있는 내부 네트워크 간의 연결 Security Groups Stateful -&gt; server side에 응답, 요청에 대해 미리 정의해놓음(상태정보를 저장하는 형태) security group에 port 를 지정하면 그 port로 req,res 가능(해당 포트에 대해 inbound, outbount port를 열어둘 필요없음) Default VPC vs Custom VPC Default VPC는 바로 인스턴스 배포가가능 Default VPC의 서브넷은 외부 인터넷과 통신이 가능 Default VPC의 EC2 인스턴스는 public, private IP 어드레스를 둘다 가지고 있음 EC2 인스턴스에 VPN 구축VPN 하드웨어 장비나 서버를 구축하지 않고 개인 PC에서 VPN을 사용하려면 aws marketplace의 OpenVPN AMI를 사용(따로 PPTP 서버 구축해도 됨) EC2 인스턴스에 vpn으로 연결하는 것 참조 : http://arisu1000.tistory.com/27744 VPC peering VPC와 다른 VPC를 Direct network route를 하는 것(private IP address를 통해) non-overlaping CIDR Block인 경우에 피어링 가능 IPv6 인 경우에 불가능 다른 AWS 계정의 VPC와도 연결 가능 https://docs.aws.amazon.com/ko_kr/AmazonVPC/latest/PeeringGuide/invalid-peering-configurations.html No Transitive peering(이행성 안됨)세개의 vpc 중 한쪽에만 나머지 두개의 vpc가 연결되어있고 나머지 두개의 vpc로 peering 하기 위해서는 직접 peering 연결이 필요하다 edge 간 라우팅 불가 IGW, 회사 네트워크등 과 연결된 VPC에 peering을 통해 해당 네트워크 연결 불가","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"VPC","slug":"VPC","permalink":"http://Q00.github.io/tags/VPC/"}]},{"title":"AWS-AMI","slug":"AWS-AMI","date":"2018-07-16T14:38:36.000Z","updated":"2018-10-13T13:32:16.474Z","comments":true,"path":"AWS-AMI/","link":"","permalink":"http://Q00.github.io/AWS-AMI/","excerpt":"","text":"AMI(Amazon Machine Image) EC2 인스턴스를 생성하기 위한 기본파일 모든 설치와 설정이 완료된 AMI를 이용하여 EC2인스턴스를 늘리는 자동횡적확장(auto scailing) 가능 AMI 사용 케이스 설치 및 설정이완료된 ec2인스턴스를 신속하게 생성해야할 때 auto scailing 등으로 자동화할때 ec2 인스턴스를 다른 리전으로 이전해야할 때 상용 솔루션을 사용하고자할때 VM import/Export빈 ec2 인스턴스에 직접 os를 설치할 수 없지만 가상화 소프트웨어(vm)를 이용해 설치한뒤 vm 이미지를 AMI로 변환가능 AMI Charateristic Region Operating System Arcitecture(32bit or 64bit) Launch Permission public -&gt; all AWS account explicit -&gt; specific AWS account implicit -&gt; 암묵적 Storage for the Root Device Amazon EBS backed AMI 데이터지속성 : 인스턴스종료시 루트 볼륨삭제( 기본적으로 Amazon EBS 기반 인스턴스 루트 볼륨의 DeleteOnTermination플래그는 true 로 설정 ) 수정 : 인스턴스 유형, 커널 , RAM 디스크, 사용제 데이터 변경 가능 정지상태 : 인스턴스가 실행되고 있지 않지만 EBS에서 루트볼륨이 지속되는 정지상태로 배치 가능 Amazon Instance-store backed AMI 데이터지속성 : 인스턴스 저장 영역 볼륨의 데이터는 인스턴스 수명동안만 지속 수정 : 인스턴스 수명동안 고정 정지상태 : 정지상태일수 없음. 실행중이거나 종료","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"AMI","slug":"AMI","permalink":"http://Q00.github.io/tags/AMI/"}]},{"title":"AWS-CloudTrail","slug":"AWS-CloudTrail","date":"2018-07-15T12:59:30.000Z","updated":"2018-10-13T13:32:16.486Z","comments":true,"path":"AWS-CloudTrail/","link":"","permalink":"http://Q00.github.io/AWS-CloudTrail/","excerpt":"","text":"CloudTrail CloudTrail 은 AWS 계정의 거버넌스, 규정 준수, 운영 및 위험 감사(risk auditing)를 활성화하도록 도와주는 AWS 서비스 Per AWS account, per region basis 옵션 설정 가능 log는 아마존 single s3 버킷에 저장됨 AWS 인프라에서 API 호출기록 작동방식 : S3 버킷정의 API 활동 생성 CloudTrail은 API 활동 기록 API 호출로그가 S3 버킷에 전달, CloudWatch 이벤트로 전달 참조 : http://jayendrapatil.com/tag/cloudtrail/","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"CloudTrail","slug":"CloudTrail","permalink":"http://Q00.github.io/tags/CloudTrail/"}]},{"title":"AWS-EMR","slug":"AWS-EMR","date":"2018-07-15T10:03:27.000Z","updated":"2018-10-13T13:32:16.525Z","comments":true,"path":"AWS-EMR/","link":"","permalink":"http://Q00.github.io/AWS-EMR/","excerpt":"","text":"MapReduce HDFS에 분산 저장된 데이터에 스트리밍 접근을 요청하며 빠르게 분산처리하도록 고안된 프로그래밍 모델이자 병렬 기법 대규모 분산 컴퓨팅 혹은 단일 컴퓨팅 환경에서 개발자가 대량의 데이터를 parallel하게 분석하게 분석할 수 있음 정보 검색을 위한 데이터가공(색인어 추출, 정렬 및 역 인덱스 생성)을 목적으로 개발됨 Amazon Elastic Map Reduce (EMR) AWS에서 제공하는 Mapreduce service 오픈 소스인 AWS 하둡, apache spark, Hbase와 같은 분산 프레임워크를 활용하여 분산 처리 시스템을 실행하고, 다른 서비스들과 연동할 수 있는 서비스 클릭 스트림 분석, 실시간 분석, 로그분석 ec2 컴퓨터와 S3의 하드를 이용하여 MapReduce 연산 진행 - 가장 load가 큰 작업은 IO작업 create EMR Cluster : 연산을 담당하는 EC2, job을 정의하는 Step, hadoop등 프레임워크 모음 클러스터에서 하드웨어와 소프트웨어 환경을 구성한뒤 MapReduce를 실행함 Logging 클러스터의 활동 기록 - S3에 버킷 형태로 저장 Action on failure 대부분의 과금 원인 allow root access","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"EMR","slug":"EMR","permalink":"http://Q00.github.io/tags/EMR/"},{"name":"MapReduce","slug":"MapReduce","permalink":"http://Q00.github.io/tags/MapReduce/"}]},{"title":"AWS-S3","slug":"AWS-S3","date":"2018-07-15T08:32:01.000Z","updated":"2018-10-13T13:32:16.570Z","comments":true,"path":"AWS-S3/","link":"","permalink":"http://Q00.github.io/AWS-S3/","excerpt":"","text":"S3 ( Amazon Simple Storage Service) 인터넷용 스토리지 서비스. 개발자가 보다 쉽게 웹 규모 컴퓨팅 작업이 가능하도록 설계 언제 어디서나 원하는 양의 데이터를 저장하고 검색가능 S3를 써야하는 이유성능, 비용, 대용량의 파일을 ec2와 EBS를 통해 구축한다면 상당히 많은 비용이 들고 노력이 요구된다. S3 는 저장용량이 무한대, 파일 저장에 최적화, 비용도 저렴 S3 자체가 수천대의 웹서버로 구성, 자동 횡적확장(auto scailing) 부한분산 (load balancing) 신경쓰지 않아도 된다. S3 url(endpoint) 를 dns 서버에 cname으로 설정하여 정적 웹페이지 index로 접속할 수 있게 해준다. 동적웹페이지(asp, jsp, php..)와 정적 웹페이지가 섞여 있다면 동적 웹페이지만 ec2에서 서비스, 정적 웹페이지는 S3 이용하면 성능 높일 수 있다. S3 기본 개념https://s3-regionName.amazonaws.com/s3Namebucket : 파일 저장 bucket ACL은 IAM user에만 해당됨object : S3에 데이터가 저장되는 최소단위, 파일과 메타데이터로 구성, key-value로 구성Object based storage로 NO Transactional database임메타 데이터는 http content type 형식 (MIME) 파일의 확장자에 따라 자동으로 설정되며 임의로 설정할 수도 있음객체의 개수는 제한 없으나 객체 하나당 용량은 5TB로 제한. (Each object can contain up to 5 TB of data) S3 API에는 초당 요청에 제한이 있음( 100 PUT/LIST/DELETE or 300 GET ) anticipate over 100 request per second, add a random prefix to the key names(should avoid sequential key name) =&gt; 무작위성을 부여해야 여러 파티션으로 나뉘어 작업가능해짐 protect data from accidential deletion versioning S3: Amazon S3 버킷에 저장된 모든 버전의 모든 객체를 보존, 검색 및 복원가능. 또한 의도치 않은 사용자 작업 및 애플리케이션 장애로부터 쉽게 복구버킷 버전관리(bucket versionig)를 통해 S3 lifecycle policy 관리 가능enable Multi-factor authentication(MFA) 헤더설정 cached control : 브라우저 캐시정책설정, 만기시간 설정 content disposition : value에 attachment로 설정하면 바로 파일 다운로드 할 수 있게함 content type : 웹 브라우저에서 파일을 어떻게 처리해야하는지 알려주는 메타데이터 S3 Storage Tiers S3 standard : 99.99% 가용성, 99.999999999% 내구성 S3 IA : Infrequenly Access -&gt; 잘접근안하지만 glacier와는 다르게 빠른 접근속도, S3보다 싸나 검색비용이 부과됨 - durability : 99.999999999% S3 One Zone IA : IA 중에서 multiple Availibility Zone이 요구되지 않는 것(장애 대처안함) Glacier : 엄청 싸고 보관용, 데이터를 검색하고 가져오는 시간이 매우김. - nativley encrypt RRS : Reduced Redundancy Stoageavailablity : 99.99 % durability : 99.99% S3 데이터 일관성 모델 S3는 읽기 후 쓰기 일관성 제공함(Read-after-write consistency for a type of PUT) -&gt; PUTS of new object 단일 키에 대한 업데이트는 원자성에 바탕을 둠 (Atomic) -&gt;&gt; 최종 일관성(eventual consistency) -&gt; overwrite PUTS and DELETES S3에서는 Amaon 여러 서버로 데이터 복제 -&gt; 고가용성 구현 변경사항 발생시 변경사항이 완전히 전파될 때 까지 기존의 데이터를 사용할 수 있음(can take some time to propagate) S3 encryptionServer Side Encryption (SSE)-S3, SSE-C, SSE-KMS S3 멀티파트 업로드resume on failure, and restart대형 객체를 여러 개로 나누어 업로드 가능 - 용량 큰 파일 실패할때 https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/dev/uploadobjusingmpu.html CloudTrail &amp; Server access loggingCloudTrail : API trakingServer access logging : visibility into object-level opration","categories":[],"tags":[]},{"title":"AWS-key-pair-위치","slug":"AWS-key-pair-위치","date":"2018-07-15T07:51:48.000Z","updated":"2018-10-13T13:32:16.604Z","comments":true,"path":"AWS-key-pair-위치/","link":"","permalink":"http://Q00.github.io/AWS-key-pair-위치/","excerpt":"","text":"key pair 저장위치 : ~/.ssh/authorized_keys형식 : ssh-rsa &lt;공개키&gt; &lt;커멘트&gt;","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"LINUX","slug":"LINUX","permalink":"http://Q00.github.io/tags/LINUX/"},{"name":"SSH-RSA","slug":"SSH-RSA","permalink":"http://Q00.github.io/tags/SSH-RSA/"},{"name":"KEY-PAIR","slug":"KEY-PAIR","permalink":"http://Q00.github.io/tags/KEY-PAIR/"}]},{"title":"AWS-Elastic-IP","slug":"AWS-Elastic-IP","date":"2018-07-15T07:42:59.000Z","updated":"2018-10-13T13:32:16.531Z","comments":true,"path":"AWS-Elastic-IP/","link":"","permalink":"http://Q00.github.io/AWS-Elastic-IP/","excerpt":"","text":"Elastic IP 동적 클라우드 컴퓨팅을 위해 고안된 고정 IPv4 주소 IPv6 지원하지 않음 참고 : https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html elastic ip : 고정된 공인 ip 제공 ec2인스턴스 배정된 ip는 ec2 인스턴스가 실행될때만 유효 , 그외에는 반납 다시시작하면 바뀔수있음 -&gt; 유동 ip따라서 이러한 공인 ip에대해 elastic ip로 연결을 시켜논다.dns같은경우 유동ip하기가 힘듬 프리티어에서 Elastic IP 1개를 무료로 사용 가능하지만 Elastic IP는 EC2에 연결해두지 않으면 요금이 청구 elastic ip를 할당만받고 인스턴스에 사용하지 않는다면 요금이 부과됨(공인 ip주소 매우부족) ip가 부족한 상황에서 Elastic ip를 만들어두고 EC2에 연결하지 않으면 ip가 만들어져 있지만 사용되지 않고 있으므로 요금이 청구 또한, EC2에 연결해두었더라도 EC2가 stop되어있는 상태라면 요금이 청구 만약 Elastic ip를 만들어두고 할당을 하지 않은 상태라면 실행중인 EC2에 할당 혹은 Elastic ip 삭제 필요! ec2인스턴스 생성하여 ssh접속해 한참 작업 후인스턴스재부팅했는데 ssh로접속이 안된다면 ip가 바뀐것임","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"Elastic_IP","slug":"Elastic-IP","permalink":"http://Q00.github.io/tags/Elastic-IP/"}]},{"title":"AWS-Security_Group Network_Access_List","slug":"AWS-Security-Group","date":"2018-07-15T07:30:31.000Z","updated":"2018-10-13T13:32:16.586Z","comments":true,"path":"AWS-Security-Group/","link":"","permalink":"http://Q00.github.io/AWS-Security-Group/","excerpt":"","text":"security group security group으로 방화벽 설정하기security group : ec2 인스턴스에 적용할 수 있는 방화벽 설정 inbound : 외부에서 ec2인스턴스로 들어오는 트래픽 http https ssh rdpOutbound : 외부로 나가는 트래픽. ec2 인스턴스안에서 인터넷을 할경우(파일다운로드, 외부 ssh접속)-&gt; inbound, outbound에 대해 특정 IP address에 대한 deny가 필요한 경우는 security group으로는 불가능하며 Network ACL 기능 사용해야함.(서브넷 방화벽)(Access control list) 방화벽역할을 하는 VPC를 위한 선택적 보안 계층(subnet) 참조 :https://docs.aws.amazon.com/ko_kr/AmazonVPC/latest/UserGuide/VPC_Security.html#VPC_Security_Comparison type: 프로토콜 형태 tcp udp icmp port : 포트번호 icmp는 포트번호 사용하지 않음 source, destination : 연결 혹은 접속 가능한 ip대역 rule : 위의 여러 것들을 세팅 조합한 것 Security group의 기본정책 Inbound Deny all, Outbound any Open EC2로 들어오는 트래픽은 아무런 정책을 넣지 않은 상태에서 모두 차단 EC2 서버에서 나가는 트래픽은 기본적으로 모두 허용 Security group 변경시 즉시 적용 stateful - 서비스에 대한 특성 및 통신상태를 관리가능하여 Inbound에 대한 규칙을 생성했을 시에 Outbound에 대한 규칙이 없더라도 동적으로 접근 규칙을 자동으로 생성한다. ( 연결이 끝날 때까지 연결 유지) ACL의 기본정책default network ACL : all outbound, inbound traffic allowcustom netowrk ACL : Inbound Deny all, Outbound deny all can block specific IP address -&gt; rule number control ( DENY CASE가 있는 경우 ALLOW 규칙보다 RULE NUMBER를 앞에 둔다) =&gt; Security Group은 못함 CAN asscociate multiple subnets.(1대 다 관계) 만약 ACL변경시 이전 ACL removed stateless : 각각 요청을 독립적인 요청으로 파악( 요청할때마다 새로 연결 ) 참조 :https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html http://faq.hostway.co.kr/AWS_HELP/7912 https://blog.naver.com/popqser2/221035576390","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"Security_Group","slug":"Security-Group","permalink":"http://Q00.github.io/tags/Security-Group/"},{"name":"ACL","slug":"ACL","permalink":"http://Q00.github.io/tags/ACL/"},{"name":"Network_Access_List","slug":"Network-Access-List","permalink":"http://Q00.github.io/tags/Network-Access-List/"}]},{"title":"AWS-EBS","slug":"AWS-EBS","date":"2018-07-07T11:06:07.000Z","updated":"2018-10-13T13:32:16.500Z","comments":true,"path":"AWS-EBS/","link":"","permalink":"http://Q00.github.io/AWS-EBS/","excerpt":"","text":"EBS(Elastic Block Store)ec2인스턴스에 장착하여 사용할 수 있는 가상 저장 장치ec2인스턴스에서 제공하는 기본용량보다 더 사용해야할때, 운영체제를 중단시키지 않고 용량을 자유롭게 늘리고 싶을때, 영구적인 데이터보관이 필요할때, RAID등의 고급기능이 필요할때 사용 프리티어에서 ebs 스토리지 30gb, ebs 200만io무료로 사용 Termination Protection이 기본적으로 꺼져있어 켜야한다. 인스턴스가 삭제되어도 남아있음. ec2에 설치된 os에서 그냥 일반적인 하드디스크나 ssd처럼 인식, 원하는 크기로 만들 수 잇음, iops 원하는 수치 Block은 unix/linux계열 os에서 일정한 크기단위로 읽고 쓰는 저장장치를 부르는말, 자기테이프, 플로피디스크, 하드디스크, 광학디스크, ssd등의 플래시메모리가 대표적 volume: ebs의 가장 기본적인 형태, os에서 바로 사용가능, 동시에 여러개의 ec2에 붙일수 없음 대신 EFS를 사용하면 됨 SSD General Purpose SSD(GP2) : balances both price and performance provisioned IOPS SSD(IO1) : I/O 성능 좋음 over 10000IOPS Magnetic Throughput Optimized HDD(ST1): Big data, Log processing, boot volume이 될 수 없음 Cold Hdd(SC1) : 일정하지 않고 희귀하게 접근하는 데이터에 관해 가장 싼 storage, 파일서버에 잘 어울림, boot volume이 될 수 없음 Magnetic(standard) : 1기가당 가장 싼 EBS 볼륨 타입(BOOT VOLUME 중) image : AMI(Amazon machine image)를 줄여부르는말, os가 설치된 형태, AMI로 ec2인스턴스 생성snapshot : ebs볼륨의 특정시점을 그대로 복사해 저장,스냅샷을 이용하여 ebs볼륨과 AMI 생성=&gt; 과금됨 (다른 리전 냅뒀을 경우)root device에 스냅샷을 생성하기 위해서는 스냅샷 생성하기전에 instance 중지시켜야함 IOPS(Input Ouput Per Second) 저장장치의 성능측정장치(100~4000IOPS) - 16kb단위로 처리, 크기가 작은파일이 있다면 16kb로 묶어서 처리하면 높은 성능 EBS and Instance StoreInstance Store Volume = Ephemeral StorageInstance Store volume 은 중지시킬수 없다. 연결 끊기면 data 손실EBS backed instance 는 중지시킬 수 있다.둘다 reboot 가능 ebs 볼륨과 RAIDebs도 RAID구성을 할 수 있음 RAID0 RAID1 RAID 1+0(RAID10) 타입 구성 EBS 스냅샷 :프리티어 1기가 무료사용스냅샷으로 ebs 볼륨 생성(다른 AZ에 생성가능)스냅샷으로 AMI생성스냡샷을 다른 리전으로 복사저장요금 -&gt; s3데이터 저장요금에 합산 =&gt; 접근은 ec2에서만 가능 ebs 스냅샷 생성하기 ebs 볼륨목록에서생성하는방법, ebs스냅샷목록에서 생성하는방법 2가지 볼륨의 스냅샷이 주기적으로 생성되는 경우(periodically) 스냅샷은 incrementally함 glacier에 직접 저장할 수 없을 뿐더러 증분식으로 저장되기때문에 retrive가 오래걸리는 glacier는 적합하지 않음 스냅샷은 기본적으로 암호화 되어있고 unencrypted snapshot으로 encrypted volume restore못함 스냅샷 삭제하기 참고: https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/ebs-deleting-snapshot.html AMI가 등록된 root device에 대한 snapshot은 삭제할 수 없음 볼륨 상태 모니터링EBS 볼륨 모니터링하는데 사용할 수 있는 데이터를 자동 제공 basic : 자동으로 5분 기간 동안 데이터 무료사용 detailed : 프로비저닝된 IOPS SSD 볼륨이 1분지표를 CloudWatch에 자동으로 보냄","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"EBS","slug":"EBS","permalink":"http://Q00.github.io/tags/EBS/"}]},{"title":"AWS_ec2","slug":"AWS-ec2","date":"2018-07-05T14:44:58.000Z","updated":"2018-10-13T13:32:16.597Z","comments":true,"path":"AWS-ec2/","link":"","permalink":"http://Q00.github.io/AWS-ec2/","excerpt":"","text":"ec2 : elastic compute cloudaws에서 가장 기본적이면서 널리쓰이는 인프라 - 인터넷에 연결된 가상서버를 제공해줌 프리티어 - linux,unix,rhel 마이크로 인스턴스 750시간, window 마이크로 인스턴스 750시간 리전당 20개씩 소프트 리밋 있음, 요청하면 늘어남 사용해야 하는 이유효율성과 비용 절감 start : ec2 인스턴스 시작, 운영체제가 부팅되고 사용할 수 있는 상태, 시작하는 순간부터 요금 과금 stop : ec2 인스턴스 정지, 완전히 시스템 정지 terminate : ec2인스턴스 삭제 reboot : ec2인스턴스 재부팅 root : 운영체제가 설치되는 스토리지, root 장치로 ebs와 인스턴스 스토리지 사용할 수 있음 kernel Id : ec2 인스턴스가 사용하는 Linux 커널,, linux 반가상화 : 외부에서 리눅스커널 지정필요 운영체제에 따른 가상화 형태 windows : os 의 커널을 수정할 수 없기 때문에 HVM(하드웨어 가상화) Full virtualization(전가상화)로 실행됨 linux : os의 커널을 수정할 수 있음, Paravirtualization (반가상화) 로 실행됨 전가상화커널을 때에 따라 선택할 수 잇음 ec2 sla(Service Level Agreement)월 99.95% : 한달에 0.36시간 장애 발생가능 ec2가 여러가지 사양인 이유비용절감 효율성 -&gt; 사용자에게 선택권을 줌 인스턴스 유형m[0-9].medium (인스턴스 패밀리 : m, 세대를 뜻하는 숫자, .뒤에는 사양 규모를 뜻하는 단어) 범용 : M1, M3으로 시작 vcpu, 메모리 네트워크 저장공간 평균 사양 컴퓨팅최적화 : C로 시작하는 인스턴스 유형, 다른 인스턴스 패밀리에 비해 메모리 대비 vCpu 비율 높음 GPU 인스턴스 : G로 시작, 고성능의 nvdia gpu 장착, CUDA Opencl 등울 실행할때 사용됩니다 메모리 최적화 :M2와 CR1로 시작하는 인스턴스 유형, 메모리 용량이 훨씬 큽니다. 스토리지 최적화 : H와 I로 시작하는 인스턴스 유형, 스토리지 용량이 훨씬크거나, 초고속 I/O 제공 마이크로 인스턴스 : 가격이 가장 싼 인스턴스, 낮은 vCpu 성능과 적은 메모리 제공vCpu : 가상화소프트웨어 제공되는 CPU 과금방식ondemand instance : 사용률에 따른 결제방식, 약정 없이 시간당 고정 요금 지불 가능spot instance : 경매 인스턴스, flexible start and end times, EC2에 의하여 종료되면 부분적인 사용시간에 대하여 과금되지 않으나 직접 인스턴스를 삭제한 경우 인스턴스가 실행된 전체 시간에 대하여 과금됨reserved instance : 선결제방식 - &gt; 환불불가, 할인 제공(ALL, partial, No upfront fee), specific instance family not typededicated hosts : not support multi tenant, 물리 ec2 serverr ec2 생성할 떄t1.micro : 반가상화 Amazon Linux AMI 선택했으면 t1만 사용가능t2.micro : 하드웨어 가상화 Amazon Linux AMI 선택했으면 t2만 사용가능 cpu 많이 쓰는 컴파일 작업을 할때는 t2인스턴스 유형이 유리함 configure instance detailsnumber of instances : 생성할 인스턴스 개수purchasing option : 스팟 인스턴스의 구매 옵션network : vpc 네트워크를 선택하는 옵션subnet : Availability Zone(가용영역)을 선택하는 옵션public ip : 공인 ip 할당하는 옵션IAM role : IAM 역할 설정shutdown behavior : ec2 인스턴스 안에 설치된 운영체제를 종료했을 때의 행동을 설정 (stop terminate)enale Termination protection : 실수로 삭제하는 것을 방지하는 옵션Monitoring : cloudwatch 세부 모니터링 사용 옵션tenancy : 가상 서버 실행 방식을 설정하는 옵션: 공유 인스턴스(shared tenancy) 전용인스턴스(Dedicated tenancy)를 선택가능 add storagetype: 루트장치(EBS)인지 추가장치(EBS, instance storage)인지Snapshot :스냅샷idsize : 스토리지 크기 (gb단위)Volume type: 스토리지 볼륨 유형 magnetic, general purpose(SSD) provisioned IOPS(SSD) 선택할 수있음magnetic : 하드디스클 사용하는 스토리지 100IOPSgeneral purpose : ssd - 1GiB당 3IOPS를 제공하는 스토리지. 마그네틱보다추가요금발생3600 초 동안 3000iops까지 성능이 높아지는 burst기능 제공(순간적으로 io가 몰릴때 iops를 높임)provisioned iops : ssd를 사용하고, I/O 대역폭을 설정할 수 있음, 마그네틱보다 추가요금발생IOPS : volume type 을 provisioned IOPS 로 선택했을때 IOPS를 설정가능delete on termination : ec2 인스턴스가 실행되고 있을때 스토리지가 실수로 삭제되는 것을 방지. puuty ssh 접속ec2 서버 인스턴스 생성 후 key value pem file 다운로드 후 puttygen -&gt; ppt file 컨버전 기본 사용자명amazon linux : ec2-userrhel: ec2-userSuSE Linux : rootUbuntu Linux : ubuntu ec2 기타 설정 및 기능 placement group : Clustered placement group: Clustering low-latency group of instances within a single AZ. spread placement group: 물리적으로 인접한 곳에 ec2인스턴스 생성 -&gt; 네트워크 퍼포먼스 극대화’ bundle instance(instance store ami) : 인스턴스 스토리지를 루트장치로 사용하는 windows instance의 내용을 s3버킷에 저장하는 기능 bundle task : bundle instance가 처리되는 과정 network interface : ENI(Elastic network interface) 생성하고 ec2인스턴스에 장착 ec2 태그 지정 참고 : https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources 메타데이터curl http://169.254.169.254/latest/meta-data/curl http://169.254.169.254/latest/user-data/인스턴스에 대한 정보를 얻을 수 있음 https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/ec2-instance-metadata.html","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"ec2","slug":"ec2","permalink":"http://Q00.github.io/tags/ec2/"}]}]}