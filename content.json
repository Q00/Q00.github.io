{"meta":{"title":"Q00 blog","subtitle":null,"description":null,"author":"Q00","url":"http://Q00.github.io"},"pages":[],"posts":[{"title":"AWS-RDS","slug":"AWS-RDS","date":"2018-07-21T07:41:08.000Z","updated":"2018-07-21T07:41:08.931Z","comments":true,"path":"AWS-RDS/","link":"","permalink":"http://Q00.github.io/AWS-RDS/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"AWS-OpsWork","slug":"AWS-OpsWork","date":"2018-07-18T15:05:57.000Z","updated":"2018-07-19T16:11:45.080Z","comments":true,"path":"AWS-OpsWork/","link":"","permalink":"http://Q00.github.io/AWS-OpsWork/","excerpt":"","text":"OpsWork 참고 : http://arisu1000.tistory.com/27736?category=477480https://docs.aws.amazon.com/ko_kr/opsworks/latest/userguide/welcome.html 특징 : Elastic BeansTalk와는 다르게 컨테이너 수정가능, 덜 편리함 기본 EC2 인스턴스에서 제공하는 메트릭 외에 CPU, 메모리 사용률, load average 등등 1분 단위 모니터링 제공 스택 삭제할 시에 스택에 포함되어있는 app, 인스턴스 지운 후 삭제 ELB 는 직접 생성해서 스택에 추가해줘야함 기본 개념OpsWork ( Stack ( Layer ( instance ( app ))) back-end)^|vanother resource( chef cookbook) 스택 (STACK)기본 구성요소로서 그룹화해서 관리함. 스택을 vpc안에 두어 사용자와 격리할 수 있음스택 수정 : region, vpc id 빼고는 모든 설정을 수정할 수 있음스택 복사 : region을 변경할때 사용할 수 있음 스택에서 어플리케이션을 배포하고 모니터링할 수 있음(인스턴스 집합(공통인스턴스)인 layer를 이용함 =&gt; 비용절감, 서버 분리를 통한 관리 이점을 얻을 수 있음) Auto Healing, Auto Scailing을 사용하여 인스턴스상태 모니터링, 새 인스턴스 provisioning 여러 스택을 사용하여 공통의 목적을 가진 인스턴스를 관리하는 것이 좋다. 개발 스택 업데이트, 버그 수정 QA 스테이징 스택 퍼블릭 버전 스택 레이어(LAYER)chef recipes 따라 설치 업데이트 배포함, 인스턴스 설정 포함. 비용절감, 서버 분리를 통한 관리 이점을 얻을 수 있음 하나 이상의 인스턴스를 가질 수 있음 Elastic Load Balancing Layer 참고 : https://docs.aws.amazon.com/ko_kr/opsworks/latest/userguide/layers-elb.html각 계층에 로드 밸런서를 하나만 연결할 수 있습니다. 각 로드 밸런서는 한 계층만 처리할 수 있습니다. AWS OpsWorks Stacks는 Application Load Balancer를 지원하지 않습니다. Classic Load Balancer만 AWS OpsWorks Stacks와 함께 사용할 수 있습니다. 인스턴스 EC2 인스턴스에 에이저트 설치 -&gt; 레이어 레시피 설정, 레이어 소프트웨어 시작 종류 24/7 인스턴스 : 수동으로 시작하고 정지하는 인스턴스 load-based 인스턴스 : CPU 사용률 같은 로드메트릭에 따라 자동으로 시작하고 정지하는 인스턴스 Time-based 인스턴스 : 지정된 일정에 따라 자동으로 시작하고 정지하는 인스턴스 인스턴스를 여러 Layer에 할당하게 되면 데이터베이스서버와 로드밸런서를 단일 인스턴스에서 호스팅-&gt; 비용 절감 어플리케이션 서버중 하나를 관리에 사용 스팟 인스턴스 지원되지 않음","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"OpsWork","slug":"OpsWork","permalink":"http://Q00.github.io/tags/OpsWork/"}]},{"title":"AWS-IAM","slug":"AWS-IAM","date":"2018-07-18T14:39:50.000Z","updated":"2018-07-18T15:05:03.246Z","comments":true,"path":"AWS-IAM/","link":"","permalink":"http://Q00.github.io/AWS-IAM/","excerpt":"","text":"IAM (Identity and Access Management) 식별 및 접근관리 aws 의 각 리소스에대해 접근제어와 권한관리 제공리소스가아닌 옵션이므로 따로 사용요금은 존재하지 않음 권한받은 유저만 접근가능 EC2 인스턴스에서 APi로 AWS 리소스에 접근하려면 항상 액세스키, 시크릿키를 설정해야만함 auto scailing 기능으로 ec2 인스턴스를 자동으로 늘려나갈때 IAM 역할을 사용하면 ec2인스턴스 생성 즉시 API로 aws리소스에 접근가능 모든 리전에서 사용가능함 IAM rule을 지정하면 인스턴스 생성시 rule을 지정해줄 수 잇음, IAM rule삭제시 인스턴스에서 aws리소스로 접근하는 권한이 사라짐 주의 사용자는 IAM rule 한개에만 적용받을 수 있음","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"IAM","slug":"IAM","permalink":"http://Q00.github.io/tags/IAM/"}]},{"title":"AWS-ELB","slug":"AWS-ELB","date":"2018-07-17T15:28:00.000Z","updated":"2018-07-18T15:47:36.187Z","comments":true,"path":"AWS-ELB/","link":"","permalink":"http://Q00.github.io/AWS-ELB/","excerpt":"","text":"ELB ( Elastic Load Balancer ) 부하분산과 고가용성을 제공하는 프로그램으로서 일종의 L4와 같은 로드밸런서 최소 2개 이상의 인스턴스가 각기 다른 AZ에 존재해야함 L4(OSI Layer 4) : OSI 레이어에서 4번째 전송계층을 뜻함, TCP UDP 등의 프로토콜이 대표적이며 포트번호로 구분함, OSI레이어에서 네트워크 계층의 IP와 묶어서 처리 IP주소와 포트번호를 기준으로 트래픽 분배 L7 : OSI레이어에서 7번째 어플리케이션계층을 뜻함http프로토콜이 대표적 http헤더의 내용을 기준으로 트래픽 분배 Application Load Balancer 로드밸런싱 알고리즘 : 트래픽을 각 ec2 인스턴스로 분배할때 사용하는 알고리즘, 라운드로빈이라는 알고리즘을 사용, 우선순위를 두지 않고 순서대로 분배하는 방식 Multiple zone supportCross-zone load balancing","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"ELB","slug":"ELB","permalink":"http://Q00.github.io/tags/ELB/"}]},{"title":"AWS-VPC","slug":"AWS-VPC","date":"2018-07-17T06:19:53.000Z","updated":"2018-07-21T06:28:22.170Z","comments":true,"path":"AWS-VPC/","link":"","permalink":"http://Q00.github.io/AWS-VPC/","excerpt":"","text":"VPC (Virtual Private Cloud) 사용자만의 가상 네트워크 제공 VPC는 무료, but VPC를 VPN에 연결할 경우 요금 부과 AWS에 가입하면 이미 하나의 VPC 존재 VPC 안에는 서브넷을 여러개 추가하여 네트워크 격리, 서브넷간의 접근제어(ACL) 설정가능(웹서버 -&gt; 공개 서브넷, db서버 -&gt; 사설 서브넷 보안 유리) VPC : 리전별 생성 서브넷 : az별 생성 CIDR 표기법으로 IP 대역 설정 서브넷에 있는 인스턴스 launch 각각 서브넷에 IP 대역 설정 서브넷 사이의 Route table 설정 VPC당 한개의 Internet Gateway를 붙일 수 있음 (한개의 Internet gateway가 모든 az와 연결되어있음) aws resource에 대해 보안적인 관리가 가능함(ACL) Security group 설정 가능함 VPC에 속한 서브넷에서 외부 인터넷에 접속하려면 인터넷 게이트웨이가 필요하다. VPC 인터넷 게이트웨이 생성 후 VPC와 Attach VPC 구성 요소 Network Interfaces 기본적으로 인스턴스마다 VPC 대역내의 사설 IP가 할당된 Network Interface가 있음 기본 사설 IP외에 추가적인 사설 IP를 가질 수 있음 eth0으로 이용하는 network interface에 한개의자동할당된 공인 IP를 이용할 수 있음 VPC의 모든 인터페이스가 기본 네트워크 인터페이스(eht0) 을 가지며 분리할 수 없다 사설 IP하나당 EIP 가질 수 있음 MAC 존재 IP Address primary private IP와 public IP가 NAT 를 통해 매핑되어있음 secondary private IP를 할당할 수 있음 Subnet 하나의 VPC에 여러개 subnet존재가능 1 Subnet = 1 AZ Route Table Internet GateWay VPC가 기본생성되었을때 인터넷과 통신 불가 VPC에 Internet Gateway를 연결해줘야지 VPC내부 인스턴스에서 외부 통신가능 Nat Instances NAT 안에 있는 private subnet이 인터넷 통신을 하기 위해서는 source/destination check을 unable해줘야함 Security group allow 규칙만 생성 VPC당 백개 생성, 하나의 그룹에 50개 룰 Network access control list(ACL) 서브넷에 연결된 방화벽 allow deny 규칙 설정 가능 stateless Virtual private gateway AWS에 있는 VPN 커넥션 AWS VPC와 외부 사용자가 이용하고 있는 내부 네트워크 간의 연결 Security Groups Stateful -&gt; server side에 응답, 요청에 대해 미리 정의해놓음(상태정보를 저장하는 형태)Default VPC vs Custom VPC Default VPC는 바로 인스턴스 배포가가능 Default VPC의 서브넷은 외부 인터넷과 통신이 가능 Default VPC의 EC2 인스턴스는 public, private IP 어드레스를 둘다 가지고 있음 EC2 인스턴스에 VPN 구축VPN 하드웨어 장비나 서버를 구축하지 않고 개인 PC에서 VPN을 사용하려면 aws marketplace의 OpenVPN AMI를 사용(따로 PPTP 서버 구축해도 됨) EC2 인스턴스에 vpn으로 연결하는 것 참조 : http://arisu1000.tistory.com/27744 VPC peering VPC와 다른 VPC를 Direct network route를 하는 것(private IP address를 통해) non-overlaping CIDR Block인 경우에 피어링 가능 IPv6 인 경우에 불가능 다른 AWS 계정의 VPC와도 연결 가능 https://docs.aws.amazon.com/ko_kr/AmazonVPC/latest/PeeringGuide/invalid-peering-configurations.html No Transitive peering(이행성 안됨)세개의 vpc 중 한쪽에만 나머지 두개의 vpc가 연결되어있고 나머지 두개의 vpc로 peering 하기 위해서는 직접 peering 연결이 필요하다.","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"VPC","slug":"VPC","permalink":"http://Q00.github.io/tags/VPC/"}]},{"title":"AWS-AMI","slug":"AWS-AMI","date":"2018-07-16T14:38:36.000Z","updated":"2018-07-16T16:38:21.447Z","comments":true,"path":"AWS-AMI/","link":"","permalink":"http://Q00.github.io/AWS-AMI/","excerpt":"","text":"AMI(Amazon Machine Image) EC2 인스턴스를 생성하기 위한 기본파일 모든 설치와 설정이 완료된 AMI를 이용하여 EC2인스턴스를 늘리는 자동횡적확장(auto scailing) 가능 AMI 사용 케이스 설치 및 설정이완료된 ec2인스턴스를 신속하게 생성해야할 때 auto scailing 등으로 자동화할때 ec2 인스턴스를 다른 리전으로 이전해야할 때 상용 솔루션을 사용하고자할때 VM import/Export빈 ec2 인스턴스에 직접 os를 설치할 수 없지만 가상화 소프트웨어(vm)를 이용해 설치한뒤 vm 이미지를 AMI로 변환가능 AMI Charateristic Region Operating System Arcitecture(32bit or 64bit) Launch Permission public -&gt; all AWS account explicit -&gt; specific AWS account implicit -&gt; 암묵적 Storage for the Root Device Amazon EBS backed AMI 데이터지속성 : 인스턴스종료시 루트 볼륨삭제( 기본적으로 Amazon EBS 기반 인스턴스 루트 볼륨의 DeleteOnTermination플래그는 true 로 설정 ) 수정 : 인스턴스 유형, 커널 , RAM 디스크, 사용제 데이터 변경 가능 정지상태 : 인스턴스가 실행되고 있지 않지만 EBS에서 루트볼륨이 지속되는 정지상태로 배치 가능 Amazon Instance-store backed AMI 데이터지속성 : 인스턴스 저장 영역 볼륨의 데이터는 인스턴스 수명동안만 지속 수정 : 인스턴스 수명동안 고정 정지상태 : 정지상태일수 없음. 실행중이거나 종료","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"AMI","slug":"AMI","permalink":"http://Q00.github.io/tags/AMI/"}]},{"title":"AWS-CloudTrail","slug":"AWS-CloudTrail","date":"2018-07-15T12:59:30.000Z","updated":"2018-07-15T13:07:47.621Z","comments":true,"path":"AWS-CloudTrail/","link":"","permalink":"http://Q00.github.io/AWS-CloudTrail/","excerpt":"","text":"CloudTrail CloudTrail 은 AWS 계정의 거버넌스, 규정 준수, 운영 및 위험 감사(risk auditing)를 활성화하도록 도와주는 AWS 서비스 Per AWS account, per region, per service basis log는 아마존 s3 버킷에 저장됨 참조 : http://jayendrapatil.com/tag/cloudtrail/","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"CloudTrail","slug":"CloudTrail","permalink":"http://Q00.github.io/tags/CloudTrail/"}]},{"title":"AWS-EMR","slug":"AWS-EMR","date":"2018-07-15T10:03:27.000Z","updated":"2018-07-15T10:52:41.204Z","comments":true,"path":"AWS-EMR/","link":"","permalink":"http://Q00.github.io/AWS-EMR/","excerpt":"","text":"MapReduce HDFS에 분산 저장된 데이터에 스트리밍 접근을 요청하며 빠르게 분산처리하도록 고안된 프로그래밍 모델이자 병렬 기법 대규모 분산 컴퓨팅 혹은 단일 컴퓨팅 환경에서 개발자가 대량의 데이터를 parallel하게 분석하게 분석할 수 있음 정보 검색을 위한 데이터가공(색인어 추출, 정렬 및 역 인덱스 생성)을 목적으로 개발됨 Amazon Elastic Map Reduce (EMR) AWS에서 제공하는 Mapreduce service 오픈 소스인 AWS 하둡, apache spark, Hbase와 같은 분산 프레임워크를 활용하여 분산 처리 시스템을 실행하고, 다른 서비스들과 연동할 수 있는 서비스 클릭 스트림 분석, 실시간 분석, 로그분석 ec2 컴퓨터와 S3의 하드를 이용하여 MapReduce 연산 진행 - 가장 load가 큰 작업은 IO작업 create EMR Cluster : 연산을 담당하는 EC2, job을 정의하는 Step, hadoop등 프레임워크 모음 클러스터에서 하드웨어와 소프트웨어 환경을 구성한뒤 MapReduce를 실행함 Logging 클러스터의 활동 기록 - S3에 버킷 형태로 저장 Action on failure 대부분의 과금 원인","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"EMR","slug":"EMR","permalink":"http://Q00.github.io/tags/EMR/"},{"name":"MapReduce","slug":"MapReduce","permalink":"http://Q00.github.io/tags/MapReduce/"}]},{"title":"AWS-S3","slug":"AWS-S3","date":"2018-07-15T08:32:01.000Z","updated":"2018-07-18T14:18:44.010Z","comments":true,"path":"AWS-S3/","link":"","permalink":"http://Q00.github.io/AWS-S3/","excerpt":"","text":"S3 ( Amazon Simple Storage Service) 인터넷용 스토리지 서비스. 개발자가 보다 쉽게 웹 규모 컴퓨팅 작업이 가능하도록 설계 언제 어디서나 원하는 양의 데이터를 저장하고 검색가능 S3를 써야하는 이유성능, 비용, 대용량의 파일을 ec2와 EBS를 통해 구축한다면 상당히 많은 비용이 들고 노력이 요구된다. S3 는 저장용량이 무한대, 파일 저장에 최적화, 비용도 저렴 S3 자체가 수천대의 웹서버로 구성, 자동 횡적확장(auto scailing) 부한분산 (load balancing) 신경쓰지 않아도 된다. S3 url(endpoint) 를 dns 서버에 cname으로 설정하여 정적 웹페이지 index로 접속할 수 있게 해준다. 동적웹페이지(asp, jsp, php..)와 정적 웹페이지가 섞여 있다면 동적 웹페이지만 ec2에서 서비스, 정적 웹페이지는 S3 이용하면 성능 높일 수 있다. S3 기본 개념object : S3에 데이터가 저장되는 최소단위, 파일과 메타데이터로 구성, key-value로 구성 메타 데이터는 http content type 형식 (MIME) 파일의 확장자에 따라 자동으로 설정되며 임의로 설정할 수도 있음객체의 개수는 제한 없으나 객체 하나당 용량은 5TB로 제한. (Each object can contain up to 5 TB of data) 헤더설정 cached control : 브라우저 캐시정책설정, 만기시간 설정 content disposition : value에 attachment로 설정하면 바로 파일 다운로드 할 수 있게함 content type : 웹 브라우저에서 파일을 어떻게 처리해야하는지 알려주는 메타데이터 S3 데이터 일관성 모델 S3는 읽기 후 쓰기 일관성 제공함(Write-After-Read consistency for a type of PUT) 단일 키에 대한 업데이트는 원자성에 바탕을 둠 (Atomic) -&gt;&gt; 최종 일관성(eventual consistency) S3에서는 Amaon 여러 서버로 데이터 복제 -&gt; 고가용성 구현 변경사항 발생시 변경사항이 완전히 전파될 때 까지 기존의 데이터를 사용할 수 있음 S3 멀티파트 업로드resume on failure, and restart https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/dev/uploadobjusingmpu.html","categories":[],"tags":[]},{"title":"AWS-key-pair-위치","slug":"AWS-key-pair-위치","date":"2018-07-15T07:51:48.000Z","updated":"2018-07-15T07:54:03.010Z","comments":true,"path":"AWS-key-pair-위치/","link":"","permalink":"http://Q00.github.io/AWS-key-pair-위치/","excerpt":"","text":"key pair 저장위치 : ~/.ssh/authorized_keys형식 : ssh-rsa &lt;공개키&gt; &lt;커멘트&gt;","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"LINUX","slug":"LINUX","permalink":"http://Q00.github.io/tags/LINUX/"},{"name":"SSH-RSA","slug":"SSH-RSA","permalink":"http://Q00.github.io/tags/SSH-RSA/"},{"name":"KEY-PAIR","slug":"KEY-PAIR","permalink":"http://Q00.github.io/tags/KEY-PAIR/"}]},{"title":"AWS-Elastic-IP","slug":"AWS-Elastic-IP","date":"2018-07-15T07:42:59.000Z","updated":"2018-07-15T07:54:10.724Z","comments":true,"path":"AWS-Elastic-IP/","link":"","permalink":"http://Q00.github.io/AWS-Elastic-IP/","excerpt":"","text":"Elastic IP 동적 클라우드 컴퓨팅을 위해 고안된 고정 IPv4 주소 IPv6 지원하지 않음 참고 : https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html elastic ip : 고정된 공인 ip 제공 ec2인스턴스 배정된 ip는 ec2 인스턴스가 실행될때만 유효 , 그외에는 반납 다시시작하면 바뀔수있음 -&gt; 유동 ip따라서 이러한 공인 ip에대해 elastic ip로 연결을 시켜논다.dns같은경우 유동ip하기가 힘듬 프리티어에서 Elastic IP 1개를 무료로 사용 가능하지만 Elastic IP는 EC2에 연결해두지 않으면 요금이 청구 elastic ip를 할당만받고 인스턴스에 사용하지 않는다면 요금이 부과됨(공인 ip주소 매우부족) ip가 부족한 상황에서 Elastic ip를 만들어두고 EC2에 연결하지 않으면 ip가 만들어져 있지만 사용되지 않고 있으므로 요금이 청구 또한, EC2에 연결해두었더라도 EC2가 stop되어있는 상태라면 요금이 청구 만약 Elastic ip를 만들어두고 할당을 하지 않은 상태라면 실행중인 EC2에 할당 혹은 Elastic ip 삭제 필요! ec2인스턴스 생성하여 ssh접속해 한참 작업 후인스턴스재부팅했는데 ssh로접속이 안된다면 ip가 바뀐것임","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"Elastic_IP","slug":"Elastic-IP","permalink":"http://Q00.github.io/tags/Elastic-IP/"}]},{"title":"AWS-Security_Group","slug":"AWS-Security-Group","date":"2018-07-15T07:30:31.000Z","updated":"2018-07-18T14:01:13.678Z","comments":true,"path":"AWS-Security-Group/","link":"","permalink":"http://Q00.github.io/AWS-Security-Group/","excerpt":"","text":"security group security group으로 방화벽 설정하기security group : ec2 인스턴스에 적용할 수 있는 방화벽 설정 inbound : 외부에서 ec2인스턴스로 들어오는 트래픽 http https ssh rdp Outbound : 외부로 나가는 트래픽. ec2 인스턴스안에서 인터넷을 할경우(파일다운로드, 외부 ssh접속)-&gt; outbount 정책에 대한 제어가 필요한 경우는 security group으로는 불가능하며 Network ACL 기능 사용해야함.(Access control list) 방화벽열할을 하는 VPC를 위한 선택적 보안 계층 참조 :https://docs.aws.amazon.com/ko_kr/AmazonVPC/latest/UserGuide/VPC_Security.html#VPC_Security_Comparison type: 프로토콜 형태 tcp udp icmp port : 포트번호 icmp는 포트번호 사용하지 않음 source, destination : 연결 혹은 접속 가능한 ip대역 rule : 위의 여러 것들을 세팅 조합한 것 Security group의 기본정책 Inbound Deny all, Outbound any Open EC2로 들어오는 트래픽은 아무런 정책을 넣지 않은 상태에서 모두 차단 EC2 서버에서 나가는 트래픽은 기본적으로 모두 허용 참조 :https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html http://faq.hostway.co.kr/AWS_HELP/7912","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"Security_Group","slug":"Security-Group","permalink":"http://Q00.github.io/tags/Security-Group/"}]},{"title":"AWS-EBS","slug":"AWS-EBS","date":"2018-07-07T11:06:07.000Z","updated":"2018-07-18T15:46:31.370Z","comments":true,"path":"AWS-EBS/","link":"","permalink":"http://Q00.github.io/AWS-EBS/","excerpt":"","text":"EBS(Elastic Block Store)ec2인스턴스에 장착하여 사용할 수 있는 가상 저장 장치ec2인스턴스에서 제공하는 기본용량보다 더 사용해야할때, 운영체제를 중단시키지 않고 용량을 자유롭게 늘리고 싶을때, 영구적인 데이터보관이 필요할때, RAID등의 고급기능이 필요할때 사용 프리티어에서 ebs 스토리지 30gb, ebs 200만io무료로 사용 ec2에 설치된 os에서 그냥 일반적인 하드디스크나 ssd처럼 인식, 원하는 크기로 만들 수 잇음, iops 원하는 수치 Block은 unix/linux계열 os에서 일정한 크기단위로 읽고 쓰는 저장장치를 부르는말, 자기테이프, 플로피디스크, 하드디스크, 광학디스크, ssd등의 플래시메모리가 대표적 volume: ebs의 가장 기본적인 형태, os에서 바로 사용가능, 동시에 여러개 ec2에 붙일수 없음image : AMI(Amazon machine image)를 줄여부르는말, os가 설치된 형태, AMI로 ec2인스턴스 생성snapshot : ebs볼륨의 특정시점을 그대로 복사해 저장,스냅샷을 이용하여 ebs볼륨과 AMI 생성=&gt; 과금됨 주의(다른 리전 냅뒀을 경우)IOPS(Input Ouput Per Second) 저장장치의 성능측정장치(100~4000IOPS) - 16kb단위로 처리, 크기가 작은파일이 있다면 16kb로 묶어서 처리하면 높은 성능 ebs 볼륨과 RAIDebs도 RAID구성을 할 수 있음 RAID0 RAID1 RAID 1+0(RAID10) 타입 구성 EBS 스냅샷 :프리티어 1기가 무료사용스냅샷으로 ebs 볼륨 생성(다른 AZ에 생성가능)스냅샷으로 AMI생성스냡샷을 다른 리전으로 복사저장요금 -&gt; s3데이터 저장요금에 합산 ebs 스냅샷 생성하기ebs 볼륨목록에서생성하는방법, ebs스냅샷목록에서 생성하는방법 2가지 볼륨 상태 모니터링EBS 볼륨 모니터링하는데 사용할 수 있는 데이터를 자동 제공 basic : 자동으로 5분 기간 동안 데이터 무료사용 detailed : 프로비저닝된 IOPS SSD 볼륨이 1분지표를 CloudWatch에 자동으로 보냄","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"EBS","slug":"EBS","permalink":"http://Q00.github.io/tags/EBS/"}]},{"title":"AWS_ec2","slug":"AWS-ec2","date":"2018-07-05T14:44:58.000Z","updated":"2018-07-17T16:16:09.893Z","comments":true,"path":"AWS-ec2/","link":"","permalink":"http://Q00.github.io/AWS-ec2/","excerpt":"","text":"ec2 : elastic compute cloudaws에서 가장 기본적이면서 널리쓰이는 인프라 - 인터넷에 연결된 가상서버를 제공해줌 프리티어 - linux,unix,rhel 마이크로 인스턴스 750시간, window 마이크로 인스턴스 750시간 사용해야 하는 이유효율성과 비용 절감 start : ec2 인스턴스 시작, 운영체제가 부팅되고 사용할 수 있는 상태, 시작하는 순간부터 요금 과금 stop : ec2 인스턴스 정지, 완전히 시스템 정지 terminate : ec2인스턴스 삭제 reboot : ec2인스턴스 재부팅 root : 운영체제가 설치되는 스토리지, root 장치로 ebs와 인스턴스 스토리지 사용할 수 있음 kernel Id : ec2 인스턴스가 사용하는 Linux 커널,, linux 반가상화 : 외부에서 리눅스커널 지정필요 운영체제에 따른 가상화 형태 windows : os 의 커널을 수정할 수 없기 때문에 HVM(하드웨어 가상화) Full virtualization(전가상화)로 실행됨 linux : os의 커널을 수정할 수 있음, Paravirtualization (반가상화) 로 실행됨 전가상화커널을 때에 따라 선택할 수 잇음 ec2 sla(Service Level Agreement)월 99.95% : 한달에 0.36시간 장애 발생가능 ec2가 여러가지 사양인 이유비용절감 효율성 -&gt; 사용자에게 선택권을 줌 인스턴스 유형m[0-9].medium (인스턴스 패밀리 : m, 세대를 뜻하는 숫자, .뒤에는 사양 규모를 뜻하는 단어) 범용 : M1, M3으로 시작 vcpu, 메모리 네트워크 저장공간 평균 사양 컴퓨팅최적화 : C로 시작하는 인스턴스 유형, 다른 인스턴스 패밀리에 비해 메모리 대비 vCpu 비율 높음 GPU 인스턴스 : G로 시작, 고성능의 nvdia gpu 장착, CUDA Opencl 등울 실행할때 사용됩니다 메모리 최적화 :M2와 CR1로 시작하는 인스턴스 유형, 메모리 용량이 훨씬 큽니다. 스토리지 최적화 : H와 I로 시작하는 인스턴스 유형, 스토리지 용량이 훨씬크거나, 초고속 I/O 제공 마이크로 인스턴스 : 가격이 가장 싼 인스턴스, 낮은 vCpu 성능과 적은 메모리 제공vCpu : 가상화소프트웨어 제공되는 CPU 과금방식온디맨드 인스턴스 : 사용률에 따른 결제방식스팟 인스턴스 : 경매 인스턴스예약 인스턴스 : 선결제방식 - &gt; 환불불가 ec2 생성할 떄t1.micro : 반가상화 Amazon Linux AMI 선택했으면 t1만 사용가능t2.micro : 하드웨어 가상화 Amazon Linux AMI 선택했으면 t2만 사용가능 cpu 많이 쓰는 컴파일 작업을 할때는 t2인스턴스 유형이 유리함 configure instance detailsnumber of instances : 생성할 인스턴스 개수purchasing option : 스팟 인스턴스의 구매 옵션network : vpc 네트워크를 선택하는 옵션subnet : Availability Zone(가용영역)을 선택하는 옵션public ip : 공인 ip 할당하는 옵션IAM role : IAM 역할 설정shutdown behavior : ec2 인스턴스 안에 설치된 운영체제를 종료했을 때의 행동을 설정 (stop terminate)enale Termination protection : 실수로 삭제하는 것을 방지하는 옵션Monitoring : cloudwatch 세부 모니터링 사용 옵션tenancy : 가상 서버 실행 방식을 설정하는 옵션: 공유 인스턴스(shared tenancy) 전용인스턴스(Dedicated tenancy)를 선택가능 add storagetype: 루트장치(EBS)인지 추가장치(EBS, instance storage)인지Snapshot :스냅샷idsize : 스토리지 크기 (gb단위)Volume type: 스토리지 볼륨 유형 magnetic, general purpose(SSD) provisioned IOPS(SSD) 선택할 수있음magnetic : 하드디스클 사용하는 스토리지 100IOPSgeneral purpose : ssd - 1GiB당 3IOPS를 제공하는 스토리지. 마그네틱보다추가요금발생3600 초 동안 3000iops까지 성능이 높아지는 burst기능 제공(순간적으로 io가 몰릴때 iops를 높임)provisioned iops : ssd를 사용하고, I/O 대역폭을 설정할 수 있음, 마그네틱보다 추가요금발생IOPS : volume type 을 provisioned IOPS 로 선택했을때 IOPS를 설정가능delete on termination : ec2 인스턴스가 실행되고 있을때 스토리지가 실수로 삭제되는 것을 방지. puuty ssh 접속ec2 서버 인스턴스 생성 후 key value pem file 다운로드 후 puttygen -&gt; ppt file 컨버전 기본 사용자명amazon linux : ec2-userrhel: ec2-userSuSE Linux : rootUbuntu Linux : ubuntu ec2 기타 설정 및 기능placement group : 물리적으로 인접한 곳에 ec2인스턴스 생성 -&gt; 네트워크 퍼포먼스 극대화’bundle instance(instance store ami) : 인스턴스 스토리지를 루트장치로 사용하는 windows instance의 내용을 s3버킷에 저장하는 기능bundle task : bundle instance가 처리되는 과정network interface : ENI(Elastic network interface) 생성하고 ec2인스턴스에 장착 ec2 태그 지정 참고 : https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources","categories":[],"tags":[{"name":"AWS","slug":"AWS","permalink":"http://Q00.github.io/tags/AWS/"},{"name":"ec2","slug":"ec2","permalink":"http://Q00.github.io/tags/ec2/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-04-21T05:13:04.712Z","updated":"2018-04-21T05:13:04.712Z","comments":true,"path":"hello-world/","link":"","permalink":"http://Q00.github.io/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}